FROM debian:buster-slim

# Set environment variables
ENV LANG=C.UTF-8

# Install stable Debian dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
        python3.7 \
        python3-pip \
        python3-setuptools \
        python3-venv \
        unzip \
        curl \
        gettext \
        xz-utils \
 && echo "BASIC INSTALLATION IS DONE!"

# Install node from binaries (nodejs package in Buster does not contain npm!)
RUN curl https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz -o node.tar.xz \
 && tar -xJf node.tar.xz \
 && mv node-v8.11.3-linux-x64 node \
 && mv /node/bin/* /usr/bin/ \
 && mv /node/lib/node_modules /usr/lib \
 && mv /node/include/node /usr/include \
 && rm -rf node* \
 && echo "NPM INSTALLATION IS DONE!"

# Install global npm packages
RUN npm install -g \
        yarn \
        parcel \
 && echo "NPM PACKAGES INSTALLATION IS DONE!"

# Install pip dependencies
RUN pip3 install --upgrade pip setuptools \
        invoke~=1.0 \
        poetry \
        virtualenvwrapper \
        toml \
 && ln -s /usr/bin/python3 /usr/bin/python \
 && ln -s /usr/bin/pip3 /usr/bin/pip \
 && rm -rf /var/lib/apt/lists/* \
 && rm -rf /root/.cache/* \
 && echo "EXTRA PACKAGE INSTALLATION IS DONE!"

# Set theme and environment variables
ENV DJANGO_SETTINGS_MODULE=ej.settings
ENV DJANGO_ENVIRONMENT=production
ENV PYTHONPATH="/app/src/:$PYTHONPATH"
WORKDIR /app

# Install core JS deps
COPY ./lib/package.json /app/lib/package.json
RUN inv js
 && echo "INSTALLED JS DEPENDENCIES"

# Install core Python deps
COPY ./etc/requirements.txt /app/etc/requirements.txt
COPY ./etc/requirements-dev.txt /app/etc/requirements-dev.txt
RUN pip3 install markupsafe toolz \
 && pip3 install sidekick \
 && pip3 install -r etc/requirements.txt -r etc/requirements-dev.txt \
 && echo "INSTALLED CORE EJ DEPENDENCIES"

# Install transient Python dependencies
COPY ./pyproject.toml /app/pyproject.toml
COPY ./poetry.lock /app/poetry.lock
COPY ./tasks.py /app/tasks.py
RUN inv -e requirements \
 && pip3 install \
        django-environ \
        django-extensions \
        django-bulk-update \
        django-manager-utils \
        django-polymorphic \
        django-pandas \
        django-filter \
        django-model-utils \
        libsass \
 && pip3 install -r etc/requirements.txt -r etc/requirements-dev.txt \
 && echo "INSTALLED TRANSIENT EJ DEPENDENCIES"

# Copy files
COPY ./.coveragerc /app/
COPY ./manage.py /app/
COPY ./docs/ /app/docs
COPY ./lib/ /app/lib/
COPY ./src/ /app/src/
COPY ./locale/ /app/locale/

# Set environment variables from docker arguments
ARG COUNTRY=brasil
ARG HOSTNAME=localhost
ARG THEME=default
ENV COUNTRY=${COUNTRY}
ENV EJ_THEME=${THEME}
ENV HOSTNAME=${HOSTNAME}

# Prepare deploy assets
RUN mkdir -p local/logs local/static/ local/media/ local/db/ \
 && python manage.py collectstatic --noinput \
 && inv -e docs \
 && inv -e js \
 && inv -e sass \
 && echo "COLLECTED STATIC ASSETS"

# Create django user
RUN groupadd -r django \
 && useradd -r -g django django \
 && chown -R django:django /app
USER django

# Save commit info
ARG COMMIT_TITLE=none
ARG COMMIT_HASH=none
RUN echo "${COMMIT_HASH}: ${COMMIT_TITLE}" > commit.txt

# Entry point defaults to inv run
EXPOSE 8000
ENTRYPOINT ["inv"]
CMD ["bash"]
