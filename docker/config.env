# ------------------------------------------------------------------------------
#
#  DJANGO ENVIRONMENT AND SECURITY
#


#  Enable/disable production environment. If DJANGO_DEBUG=True, it will show
#  tracebacks for errors instead of generic 4xx or 5xx error pages. This is
#  useful for debugging, but *MUST* be disabled in production since it leaks
#  important information in the debug messages.
DJANGO_DEBUG=False
DJANGO_ENVIRONMENT=production

#  The secret key is a random sequence of values. In theory, attackers that
#  know the secret key can forge sessions in Django. Keep this secret and
#  obviously change the secret key to something that is not available in a public
#  git repository!
DJANGO_SECRET_KEY=al238gd93glx6o32nl02l1gi12678xz903

#  Hostname in your local network
HOSTNAME=localhost

#  Configured the list of host names that can serve pages
#  Usually, you only need to put the public address and/or IP of the web service.
#  It accepts a list of addresses, if necessary.
#  Similarly to HOSTNAME, hosts *do not* include the scheme (i.e., you must
#  drop the "http://" part of the address).
DJANGO_ALLOWED_HOSTS=localhost

#  Do not change, unless you know what you are doing!
USING_DOCKER=true
DJANGO_SETTINGS_MODULE=ej.settings
#CSRF_TRUSTED_ORIGINS=
#DJANGO_X_FRAME_OPTIONS=SAMEORIGIN
#DJANGO_CORS_ORIGIN_ALLOW_ALL=False
#DJANGO_CORS_ALLOW_CREDENTIALS=False


# ------------------------------------------------------------------------------
#
#  INTERNATIONALIZATION
#

#  Usually, it suffices to set COUNTRY to the correct location
#COUNTRY=brazil


# ------------------------------------------------------------------------------
#
# DATABASE CONFIGURATION
#
#  Setup database security. Those vars are shared between the database and
#  Django containers
#

#  You must set these variables to the correct authentication parameters of your
#  database, including database name (default: db), user and password.
#
#  Password should obviously be something stronger than "password"!
POSTGRES_DB=table
POSTGRES_USER=user
POSTGRES_PASSWORD=password

#  ATTENTION!
#  Construct the DJANGO_DB_URL from the variables above using the template
#  bellow. Use sqlite:///<path-to-file> for SQLite-based deploys.
DJANGO_DB_URL=psql://user:password@postgres:5432/table


# ------------------------------------------------------------------------------
#
#  CUSTOMIZATION
#
#  This section define settings that can be used to customize the look and feel
#  of your EJ instance.
#

#  Set the theme for the instance. The theme controls many aspects o the
#  application such as CSS, static assets, and it can even override default
#  configuration and settings. Currently, EJ distributes only two themes:
#  "default" and "cpa", but you can easily create your own themes.
#EJ_THEME=default

#  Django /admin/ URL is an obvious attack spot. We recommend to change it to
#  something less obvious.
#DJANGO_ADMIN_URL=admin/

#  Enable/Disable specific core apps. Most users will want to leave all those
#  apps enabled
#EJ_ENABLE_BOARDS=True
#EJ_ENABLE_PROFILES=True
#EJ_ENABLE_NOTIFICATIONS=True
#EJ_ENABLE_CLUSTERS=True
#EJ_ENABLE_DATAVIZ=True
#EJ_ENABLE_GAMIFICATION=True

#  Conversations and boards limits. Only applicable if ENABLE_BOARDS=True.
#EJ_MAX_COMMENTS_PER_CONVERSATION=2
#EJ_MAX_CONVERSATIONS_PER_BOARD=5

#  Internal URLs. This configuration makes it possible to set up different
#  redirects for the home URLs for anonymous vs logged-in users.
#EJ_ANONYMOUS_HOME_PATH=/start/
#EJ_USER_HOME_PATH=/conversations/

#  Comma-separated list of fields that are excluded from user profiles.
#  This is not a database level configuration, but rather an UI option. Fields
#  always exist as columns on the database, so changing this configuration does
#  not cause migrations.
#
#  List of field names:
#    race, ethnicity, education, gender, gender_other, birth_date, country,
#    state, city, biography, occupation, political_activity, profile_photo
#EJ_EXCLUDE_PROFILE_FIELDS=

#  Control some visible messages for the UI.
#EJ_PAGE_TITLE=EJ Platform
#EJ_REGISTER_TEXT=Not part of EJ yet?
#EJ_LOGIN_TITLE_TEXT=Welcome!


# ------------------------------------------------------------------------------
#
#  E-MAIL CONFIGURATION
#

#  Set the SMTP host to the parameters used by your organization.
#  If you really want to use Gmail, as in the example, set USE_TLS=True
#EMAIL_HOST=smtp.gmail.com
#EMAIL_PORT=587
#EMAIL_HOST_USER=sender-email@gmail.com
#EMAIL_HOST_PASSWORD=password
#EMAIL_USE_TLS=False
#EMAIL_USE_SSL=False

#  E-mail/name used to send messages on behalf of EJ
#DEFAULT_FROM_EMAIL=sender-email@gmail.com
#DEFAULT_FROM_NAME=EJ Team

# ------------------------------------------------------------------------------
#
#  ROCKETCHAT CONFIGURATION
#

#  Set Rocket.Chat integration to "true" if you want to enable it.
#EJ_ROCKETCHAT_INTEGRATION=False

#  Set the variables bellow if you do not want to store Rocket.Chat configuration
#  on the database. You can discover the AUTH_TOKEN and USER_ID of the administrative
#  user by connecting with the Rocket.Chat API using the following command:
#
#    $ curl https://rocket.chat.domain/api/v1/login/ -d "user=username&password=password"
#
#  The optional API_URL is the domain in the intranet that the Django instance
#  uses to communicate with Rocket.Chat. If your network has such configuration,
#  it is recommended to use the internal address for API calls instead of the
#  public one.
#EJ_ROCKETCHAT_URL=https://rocket.chat.domain
#EJ_ROCKETCHAT_API_URL=https://rocket-internal-name
#EJ_ROCKETCHAT_USER_ID=given-by-rocket-chat
#EJ_ROCKETCHAT_AUTH_TOKEN=given-by-rocket-chat
#EJ_ROCKETCHAT_USERNAME=username
#EJ_ROCKETCHAT_PASSWORD=password
