<div class="time-chart">
    <div class="date-picker">
      <h3 class="charts-section__title">{{_('Vote period')}}</h3>
      <div class="date-picker__date-selector">
        <input id="start-date" class="date-picker__input date-picker__input--margin-bottom " type="date">
        <input id="end-date" class="date-picker__input" type="date">
      </div>
    </div>

    <div class="time-chart__container">
      <div class="time-chart--loading">
        <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
      </div>
      <div id="voting-time-chart" style="width: 100%; height: 400px;"></div>
    </div>

    <div class="time-chart--invalid-dates">
      <span class="helptext">{{ _('end date must be gratter then start date') }}</span>
    </div>
</div>

<script>

 function formatDate(unformatedDate, locale="") {

    unformatedDate = new Date(unformatedDate);

    let Day = unformatedDate.getUTCDate() >= 10 ? unformatedDate.getUTCDate() : `0${unformatedDate.getUTCDate()}`;
    let Month = unformatedDate.getUTCMonth() >= 10 ? unformatedDate.getUTCMonth() : `0${unformatedDate.getUTCMonth()}`;
    let Year = unformatedDate.getFullYear();

     if (locale) {
        return `${Day}/${Month}/${Year}`;
     }

    return `${Year}-${Month}-${Day}`;
 }

 function renderVotingChart(votes) {
    let chart = echarts.init($('#voting-time-chart')[0]);
     data = votes.data
     const X = data.map(d => formatDate(d.date, "pt-br"))
    const Y = data.map(d => d.value)
     let option = {
         textStyle: {
             fontFamily: "Work Sans"
         },
         color: ['#042A46'],
         grid: {
             right: '0',
             left: '3%',
             top: '5%'
         },
         tooltip: {
            trigger: 'axis'
         },
        xAxis: {
            type: 'category',
            data: X,
            boundaryGap: false,
        },
        yAxis: {
            type: 'value',
        },
        series: [
            {
            data: Y,
            type: 'line',
            areaStyle: {}
            }
        ]
    };
    chart.setOption(option);
 }

function setDateFilter(startDate, endDate) {
    document.getElementById('end-date').value = formatDate(endDate);
    document.getElementById('start-date').value = formatDate(startDate);
}


function listenToDateChanges() {
    let startDateInput = document.getElementById("start-date");
    let endDateInput = document.getElementById("end-date");

    startDateInput.onchange = updateVisualization
    endDateInput.onchange = updateVisualization
}

function showLoading() {
  document.querySelector(".time-chart--loading").style.display = "block";
}

function hideLoading() {
  document.querySelector(".time-chart--loading").style.display = "none";
}

async function updateVisualization() {
    if (startDateIsBiggerThenEndDate()) {
      showErrors("invalid-dates");
      return;
    }
    hideErrors();
    showLoading();
    var voteData = await requestData();
    hideLoading();
    renderVotingChart(voteData);
}

async function loadVoteVisualization() {
    listenToDateChanges();
    showLoading();
    var voteData = await requestData();
    if (voteData.start_date && voteData.end_date) {
        setDateFilter(voteData.start_date,voteData.end_date);
    }
    hideLoading();
    renderVotingChart(voteData);
}

function parseDate(voteData) {
  voteData.data.map(d => ({date: new Date(d.date), value: d.value}))
  return voteData;
}

function startDateIsBiggerThenEndDate() {
  var startDate = document.getElementById("start-date").value;
  var endDate = document.getElementById("end-date").value;
  return startDate > endDate;
}

function showErrors() {
  document.querySelector(".time-chart--invalid-dates").style.display = "block";
}

function hideErrors() {
  document.querySelector(".time-chart--invalid-dates").style.display = "none";
}

async function requestData() {
  var startDate = document.getElementById("start-date").value;
  var endDate = document.getElementById("end-date").value;

  var url =
    "/conversations/{{conversation.id}}/{{conversation.slug}}/report/votes-over-time?startDate=" +
    startDate +
    "&endDate=" +
    endDate
  var response = await fetch(url);
  var data = await response.json();

  if (data.error) {
    showErrors();
    return {};
  }

  return data;
}

function showDatePickers () {
  let startDate = document.getElementById("start-date");
  let endDate = document.getElementById("end-date");
  startDate.addEventListener('click', () => {startDate.showPicker()});
  endDate.addEventListener('click', () => {endDate.showPicker()});
}

window.addEventListener('load', loadVoteVisualization);
window.addEventListener('load', showDatePickers);
</script>
