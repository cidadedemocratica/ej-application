{% macro pagination(page, items) %}
<div class="pagination">
    <div class="pagination__info">
        <span>
            {{_("Exhibiting")}}&nbsp;{{page|length}}&nbsp;{{_('of')}}&nbsp;{{page.paginator.count}}
        </span>
    </div>
    <div class="pagination__container">
        <div>
            {% if page.has_previous() %}
            <a onclick="setPage('previous')" class="pagination__container-page pagination__container-arrow--first">
                <i class="fas fa-chevron-left"></i>
            </a>
            {% else %}
                <span class="pagination__container-page pagination__container-arrow--first">
                    <i class="fas fa-chevron-left"></i>
                </span>
            {% endif %}
        </div>
        
        <div class="pagination__container-index">
            {% for page_number in page.paginator.page_range %}
                {# current page #}
                {% if page_number == page.number %}
                    <span class="pagination__container-page pagination__container-page--current">
                        {{page_number}}
                    </span>
                {# current page and on each sides pages #}
                {% elif page_number + 1 == page.number or page_number - 1 == page.number %}
                    <a class="pagination__container-page" onclick="setPage({{ page_number }})">
                        {{ page_number }}
                    </a>
                {# first #}
                {% elif page_number != page.number and page_number == 1 %}
                    <a class="pagination__container-page" onclick="setPage({{ page_number }})">
                        {{ page_number }}
                    </a>
                    {% if page.number > 3 %}
                        <span class="pagination__container-page pagination__container-page--clear-elipse">
                            ...
                        </span>
                    {% endif %}
                {# last #}
                {% elif page_number != page.number and page_number == page.paginator.num_pages %}
                    {% if page_number - 1 != page.number %}
                        <span class="pagination__container-page pagination__container-page--clear-elipse">
                            ...
                        </span>
                    {% endif %}
                    <a class="pagination__container-page" onclick="setPage({{ page_number }}, event)">
                        {{ page_number }}
                    </a>
                {% endif %}
            {% endfor %}
        </div>

        <div>
            {% if page.has_next() %}
                <a onclick="setPage('next')" class="pagination__container-page pagination__container-arrow--last">
                    <i class="fas fa-chevron-right"></i>
                </a>
            {% else %}
                <span class="pagination__container-page pagination__container-arrow--last">
                    <i class="fas fa-chevron-right"></i>
                </span>
            {% endif %}
        </div>
        
        <input name="page" id="page" value={{page.number}} type="hidden">
    </div>
</div>
<div class="scroll-top">
    <i class="fa">&#xf139;</i>
    <a id="report-scroll-top">{{_("Back to top")}}</a>
</div>
<script>

    // set page to 1 when ordering or cluster field changes.
    // This is a common behavior for web pages with filters and pagination.
    function resetPageOnFilter() {
        $("#comment-filters-form").on(
            {
                orderChanged: function() {
                    let pageInput = $("#page");
                    pageInput[0].value = 1;
                },
                clustersChanged: function() {
                    let pageInput = $("#page");
                    pageInput[0].value = 1;
                }
            }
        )
    }

    // setNextPage is necessary to avoid calling paginator methods on each HTMX request.
    function setPage(step) {
        let pageValue = 1;

        switch (step) {
        case 'last':
            pageValue = "{{page.paginator.num_pages}}";
            break;
        case 'next':
            pageValue = "{{page.next_page_number() if page.has_next() else page.number}}";
            break;
        case 'previous':
            pageValue = "{{page.previous_page_number() if page.number > 1 else 1}}";
            break;
        default:
            pageValue = step;
        }

        let pageInput = $("#page");
        pageInput[0].value = pageValue;
        htmx.trigger('#comment-filters-form', 'pageChanged');
    }

    $(document).ready(function() {
        resetPageOnFilter();
    })

    $("#report-scroll-top").on("click", function() {
        $('html, body').animate({ scrollTop: 0 }, 'smooth');
    });
</script>
{% endmacro %}
