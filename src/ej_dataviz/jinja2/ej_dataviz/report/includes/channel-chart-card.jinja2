<svg id="channel-chart" width="324" height="406"></svg>
<script src="https://d3js.org/d3.v7.min.js"></script>
<script>
        let data = [
            {name: 'telegram', value: {{channel_votes['telegram'] | safe}} },
            {name: 'whatsapp', value: {{channel_votes['whatsapp'] | safe}} },
            {name: 'opinionComponent', value: {{channel_votes['opinion_component'] | safe}} },
            {name: 'webchat', value: {{channel_votes['webchat'] | safe}} },
            {name: 'unknown', value: {{channel_votes['unknown'] | safe}} }
        ];

        data = data.filter(d => d.value != 0)
        const width = d3.select('#channel-chart').attr('width');
        const height = d3.select('#channel-chart').attr('height');

        const pie = d3.pie()
            .sort(null)
            .value(d => d.value)
        
        const arc = d3.arc()
            .innerRadius(0)
            .outerRadius(Math.min(width, height) / 3 - 1)
        
        const arcLabel = d3.arc().innerRadius(Math.min(width, height) / 3 * 0.8).outerRadius(Math.min(width, height) / 3 * 0.8);

        const arcs = pie(data);

        const color = d3.scaleOrdinal()
            .domain(data.map(d => d.name))
            .range(d3.quantize(t => d3.interpolateSpectral(t * 0.8 + 0.1), data.length + 1).reverse())

        const svg = d3.select('#channel-chart').attr("viewBox", [-width / 2, -height / 2, width, height]);

        svg.append("g")
        .attr("stroke", "white")
        .selectAll("path")
        .data(arcs)
        .join("path")
        .attr("fill", d => color(d.data.name))
        .attr("d", arc)
        .append("title")
        .text(d => `${d.data.name}: ${d.data.value.toLocaleString()}`)

        svg.append("g")
            .attr("font-family", "sans-serif")
            .attr("font-size", 12)
            .attr("text-anchor", "middle")
            .selectAll("text")
            .data(arcs)
            .join("text")
            .attr("transform", d => `translate(${arcLabel.centroid(d)})`)
            .call(text => text.append("tspan")
                .attr("y", "-0.4em")
                .attr("font-weight", "bold")
                .text(d => d.data.name))
            .call(text => text.filter(d => (d.endAngle - d.startAngle) > 0.25).append("tspan")
                .attr("x", 0)
                .attr("y", "0.7em")
                .attr("fill-opacity", 0.7)
                .text(d => d.data.value.toLocaleString()));
</script>