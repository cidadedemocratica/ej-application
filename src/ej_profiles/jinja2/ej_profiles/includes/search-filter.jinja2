{% macro search_filter(all_tags, participated_tags, name, has_filtered_tag, host, api_args) %}
    <div class="input-container">
        <input class="input-container__search" type="search"
            placeholder="{{_('Search')}}"
            onkeyup="{{name}}filterConversationByTagAndName(this);"
        >
    </div>

    <div class="{{name}}-tag-header" id="{{name}}-tag-buttons">
        <input list="{{name}}-all-tags" id="{{name}}-tag-choice" name="{{name}}-tag-choice" placeholder="{{ _('Find a theme') }}">  
        <datalist id="{{name}}-all-tags">
            {% for tag in all_tags %}
                {% if not tag in participated_tags %}
                    <option value="{{tag}}">
                {% endif %}
            {% endfor %}
        </datalist>

        <a class="{{name}}-tag-header--add" id="{{name}}-tag-input-button" onclick="{{name}}addInputTag()">
            <i class="fa fa-chevron-right fa-2xl"></i>
        </a> 
        <button id="{{name}}-all-conversations-button" 
                class="{{name}}-tag-header__all-conversations--selected" 
                onclick="{{name}}changeStateAllConversations()" 
                data-selected="true">
                {{ _('All') }}
        </button>
        
        {% for tag in participated_tags %}
            <button class="{{name}}-tag-header__tags--unselected" onclick="{{name}}changeStateTag(this)" data-selected="false">{{tag}}</button>
        {% endfor %}
    </div>

    {% if participated_tags and not has_filtered_tag %}
        <div class="{{name}}-tag-header__tooltip" id="{{name}}-tag-tooltip">
            <div class="{{name}}-tag-header__tooltip__arrow"></div>
            {{ _('Select to view conversations within that topic.') }}
        </div>
    {% endif %}

    <script>
    let {{name}}selectedTags = [];
    const {{name}}allTags = {{ all_tags|safe }};

    $("#{{name}}-tag-tooltip").insertAfter($(".{{name}}-tag-header__tags--unselected:first"));

    const {{name}}tagInputElement = document.querySelector("#{{name}}-tag-choice");
    {{name}}tagInputElement.addEventListener("keyup", {{name}}tagInputCheckIfExists);

    function {{name}}tagInputCheckIfExists(event){
        const {{name}}tagInputButton = document.querySelector("#{{name}}-tag-input-button");
        if (!{{name}}allTags.includes(event.target.value)){
            {{name}}tagInputButton.classList.add("public-tag-header--add--not-allowed");
        }
        else {
            if ({{name}}tagInputButton.classList.contains("public-tag-header--add--not-allowed")) {
                {{name}}tagInputButton.classList.remove("public-tag-header--add--not-allowed");
            }
        }
    }

    document.addEventListener("click", {{name}}removeTooltip);

    function {{name}}removeTooltip() {
        $(".{{name}}-tag-header__tags--unselected").insertBefore($(".{{name}}-tag-header__tooltip"));
        $(".{{name}}-tag-header__tooltip").hide();
        document.removeEventListener("click", {{name}}removeTooltip);
    }

    function {{name}}addInputTag(){
        const tagButtonsDiv = document.getElementById("{{name}}-tag-buttons");
        const inputField = document.getElementById("{{name}}-tag-choice");
        const typedTag = inputField.value;
        if ({{name}}allTags.includes(typedTag)){
            {{name}}selectedTags.push(typedTag);
            tagButtonsDiv.innerHTML = tagButtonsDiv.innerHTML + `<button class="{{name}}-tag-header__tags--selected" onclick="{{name}}changeStateTag(this)" data-selected="true">${typedTag}</button>`;
            {{name}}getConversationByTag();
        }
        else { return }

        const allConversationsButton = document.getElementById("{{name}}-all-conversations-button");
        const isAllSelected = JSON.parse(allConversationsButton.dataset.selected);
        if (isAllSelected){
            {{name}}replaceClass(allConversationsButton, "{{name}}-tag-header__all-conversations--selected", "{{name}}-tag-header__all-conversations--unselected");
            allConversationsButton.dataset.selected = !isAllSelected;
        } 
        document.querySelector(`#{{name}}-all-tags option[value='${typedTag}']`).remove();
    }

    function {{name}}changeStateTag(currentTag){
        const isSelected = JSON.parse(currentTag.dataset.selected);
        const tagName = currentTag.textContent;

        if (isSelected){
            {{name}}selectedTags = {{name}}selectedTags.filter((value)=>{
                return value != tagName;
            });
            {{name}}replaceClass(currentTag, "{{name}}-tag-header__tags--selected", "{{name}}-tag-header__tags--unselected");
        }
        else {
            allConversationsButton = document.getElementById("{{name}}-all-conversations-button");
            const isAllSelected = JSON.parse(allConversationsButton.dataset.selected);
            if(isAllSelected){
                {{name}}replaceClass(allConversationsButton, "{{name}}-tag-header__all-conversations--selected", "{{name}}-tag-header__all-conversations--unselected");
                allConversationsButton.dataset.selected = false;
            }
            {{name}}selectedTags.push(tagName);
            {{name}}replaceClass(currentTag, "{{name}}-tag-header__tags--unselected", "{{name}}-tag-header__tags--selected");
        }
        currentTag.dataset.selected = !isSelected;
        {{name}}getConversationByTag();
    }

    function {{name}}getConversationByTag(){
        $.ajax({
            url: "{{ host }}/api/v1/conversations",
            data: {"tags": {{name}}selectedTags, {{api_args}}: true },
            traditional: true,
            success: (retrievedConversations) => {
                if (retrievedConversations.length == 0) {
                    {{name}}changeStateAllConversations();
                } else {
                    {{name}}updateConversations(retrievedConversations);

                }
            }
        }); 
    }

    function {{name}}getPromotedConversations(){
        $.ajax({
            url: "{{ host }}/api/v1/conversations",
            data: { {{api_args}}: true },
            success: (retrievedConversations) => {
                {{name}}updateConversations(retrievedConversations)
            }
        });
    }

    function {{name}}changeStateAllConversations(){
        allConversationsButton = document.getElementById("{{name}}-all-conversations-button");
        const isSelected = JSON.parse(allConversationsButton.dataset.selected);
        if (isSelected){
            {{name}}replaceClass(allConversationsButton, "{{name}}-tag-header__all-conversations--selected", "{{name}}-tag-header__all-conversations--unselected");
            {{name}}getConversationByTag();
        } 
        else {
            tags = document.getElementById("{{name}}-tag-buttons");
            const tagButtons = tags.getElementsByTagName("button");
            for(let tagButton of tagButtons){
                {{name}}replaceClass(tagButton, "{{name}}-tag-header__tags--selected", "{{name}}-tag-header__tags--unselected");
                tagButton.dataset.selected = false;
            }

            {{name}}selectedTags = [];
            {{name}}getPromotedConversations();

            {{name}}replaceClass(allConversationsButton, "{{name}}-tag-header__all-conversations--unselected", "{{name}}-tag-header__all-conversations--selected");
        }

        allConversationsButton.dataset.selected = !isSelected;

    }

    function {{name}}updateConversations(conversations){
        let fullHtml = ""
        for (index in conversations) {
            fullHtml += "<div class='margin-y3'>" + conversations[index].card + "</div>"
        }
        const parsedHtml = new DOMParser().parseFromString(fullHtml, "text/html");
        document.getElementById("{{name}}-current-cards").innerHTML = fullHtml;
    }

    function {{name}}replaceClass(element, oldClass, newClass){
        element.classList.remove(oldClass);
        element.classList.add(newClass);
    }

    function {{name}}filterConversationByTagAndName(input){
        $.ajax({
            url: "{{ host }}/api/v1/conversations",
            data: {"tags": {{name}}selectedTags, {{api_args}}: true, text_contains: input.value},
            traditional: true,
            success: (retrievedConversations) => {
                const warnMessage = "Não há conversas cadastradas com essas palavras-chave dentro deste tema. Por gentileza, refaça a busca."
                let cardsDiv = document.getElementById("{{name}}-current-cards");
                
                if (retrievedConversations.length >= 1) {
                    {{name}}updateConversations(retrievedConversations);
                    cardsDiv.classList.remove("input-container__warn-message");
                } else {
                    cardsDiv.innerHTML = warnMessage;
                    cardsDiv.classList.add("input-container__warn-message");
                }
            }
        }); 
    }
    </script>

{% endmacro %}