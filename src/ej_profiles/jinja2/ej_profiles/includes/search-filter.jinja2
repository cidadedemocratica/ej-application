<div class="tag-header" id="tag-buttons">
    <input list="all-tags" id="tag-choice" name="tag-choice" placeholder="{{ _('Find a theme') }}">  
    <datalist id="all-tags">
        {% for tag in all_tags %}
            {% if not tag in participated_tags %}
                <option value="{{tag}}">
            {% endif %}
        {% endfor %}
    </datalist>

    <a class="tag-header--add" onclick="addInputTag()">
        <i class="fa fa-chevron-right fa-2xl"></i>
    </a> 
    <button id="all-conversations-button" class="tag-header__all-conversations--selected" onclick="changeStateAllConversations()" data-selected="true">{{ _('All') }}</button>
    
    {% for tag in participated_tags %}
        <button class="tag-header__tags--unselected" onclick="changeStateTag(this)" data-selected="false">{{tag}}</button>
    {% endfor %}
</div>

{% if participated_tags and not has_filtered_tag %}
    <div class="tag-header__tooltip" id="tag-tooltip">
        <div class="tag-header__tooltip__arrow"></div>
        {{ _('Select to view conversations within that topic.') }}
    </div>
{% endif %}

<script>
let selectedTags = [];
const allTags = {{ all_tags|safe }};

$("#tag-tooltip").insertAfter($(".tag-header__tags--unselected:first"));

document.addEventListener("click", removeTooltip);

function removeTooltip() {
    $(".tag-header__tags--unselected").insertBefore($(".tag-header__tooltip"));
    $(".tag-header__tooltip").hide();
    document.removeEventListener("click", removeTooltip);
}

function addInputTag(){
    const tagButtonsDiv = document.getElementById("tag-buttons");
    const inputField = document.getElementById('tag-choice');
    const typedTag = inputField.value;
    if (allTags.includes(typedTag)){
        selectedTags.push(typedTag);
        tagButtonsDiv.innerHTML = tagButtonsDiv.innerHTML + `<button class="tag-header__tags--selected" onclick="changeStateTag(this)" data-selected="true">${typedTag}</button>`;
        getConversationByTag();
    }

    const allConversationsButton = document.getElementById("all-conversations-button");
    const isAllSelected = JSON.parse(allConversationsButton.dataset.selected);
    if (isAllSelected){
        replaceClass(allConversationsButton, "tag-header__all-conversations--selected", "tag-header__all-conversations--unselected");
        allConversationsButton.dataset.selected = !isAllSelected;
    } 
    document.querySelector(`#all-tags option[value=${typedTag}]`).remove();
}

function changeStateTag(currentTag){
    const isSelected = JSON.parse(currentTag.dataset.selected);
    const tagName = currentTag.textContent;

    if (isSelected){
        selectedTags = selectedTags.filter((value)=>{
            return value != tagName;
        });
        replaceClass(currentTag, "tag-header__tags--selected", "tag-header__tags--unselected");
    }
    else {
        allConversationsButton = document.getElementById("all-conversations-button");
        const isAllSelected = JSON.parse(allConversationsButton.dataset.selected);
        if(isAllSelected){
            replaceClass(allConversationsButton, "tag-header__all-conversations--selected", "tag-header__all-conversations--unselected");
            allConversationsButton.dataset.selected = false;
        }
        selectedTags.push(tagName);
        replaceClass(currentTag, "tag-header__tags--unselected", "tag-header__tags--selected");
    }
    currentTag.dataset.selected = !isSelected;
    getConversationByTag();
}

function getConversationByTag(){
    $.ajax({
        type: "get",
        url: "{{ host }}/api/v1/conversations/",
        data: {"tags": selectedTags},
        traditional: true,
        success: (retrievedConversations) => {
            if (retrievedConversations.length == 0) {
                changeStateAllConversations();
            } else {
                updateConversations(retrievedConversations);

            }
        }
    }); 
}

function getPromotedConversations(){
    $.get("{{ host }}/api/v1/conversations?is_promoted=true",
        (retrievedConversations) => {
            updateConversations(retrievedConversations)
        }
    );
}

function changeStateAllConversations(){
    allConversationsButton = document.getElementById("all-conversations-button");
    const isSelected = JSON.parse(allConversationsButton.dataset.selected);
    if (isSelected){
        replaceClass(allConversationsButton, "tag-header__all-conversations--selected", "tag-header__all-conversations--unselected");
        getConversationByTag();
    } 
    else {
        tags = document.getElementById("tag-buttons");
        const tagButtons = tags.getElementsByTagName("button");
        for(let tagButton of tagButtons){
            replaceClass(tagButton, "tag-header__tags--selected", "tag-header__tags--unselected");
            tagButton.dataset.selected = false;
        }

        selectedTags = [];
        $.get("{{ host }}/api/v1/conversations?is_promoted=true",
            (retrievedConversations) => {
                updateConversations(retrievedConversations)
            }
        );

        replaceClass(allConversationsButton, "tag-header__all-conversations--unselected", "tag-header__all-conversations--selected");
    }

    allConversationsButton.dataset.selected = !isSelected;

}

function updateConversations(conversations){
    let fullHtml = ""
    for (index in conversations) {
        fullHtml += "<div class='margin-y3'>" + conversations[index].card + "</div>"
    }
    const parsedHtml = new DOMParser().parseFromString(fullHtml, "text/html");
    document.getElementById("current-cards").innerHTML = fullHtml;
}

function replaceClass(element, oldClass, newClass){
    element.classList.remove(oldClass);
    element.classList.add(newClass);
}

</script>