<div>
  <div class="welcome-message">
      <p>{{ _('Welcome to EJ analysis area. Here we presents data crossing between EJ and other tools, like Analytics and Mautic. Before starting collecting, it is necessary to check if this conversation is available to data crossing. Read more on our documentation.')}}.</p>
    {% if mongodb_timeout %}
      <div class="empty-viz">
        <p class="pad-x3 rounded-3 color-negative border-1">{{ _('Could not connect to analysis database, try later')}}.</p>
      </div>
  {% endif %}
  </div>
  <div class="collecing-data-state">
    {% if collecting_is_running %}
        <span class="helptext">{{ _('A data collection is running. Wait a few minutes to see the vizualizations') }}</span>
        <div class="card-body-content-loading">
            <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
        </div>
    {% endif %}
  </div>
  {% if data_exists %}
    <div class="card">
        <div class="card-header">
          <div class="card-header-title">
            <i class="fa fa-users"></i>
            <span> {{ _('Engagement vs Aquisition') }}</span>
          </div>
          <div class="card-header-daterange">
              <div>
                  <input type="date" id="aquisition-date-start">
              </div>
              <div>
                  <input type="date" id="aquisition-date-end">
              </div>
          </div>
        </div>
        <div class="card-body">
            <div class="card-filters">
                <div class="card-filters-body">
                    <div class="card-filters-body-utm">
                      <div>
                        <label> {{ _('Engagement source') }}</label>
                        <select name="utm source" id="aquisition-utm-source">
                          {% for utm_source_option in utm_source_options %}
                          <option value={{utm_source_option}}>{{utm_source_option}}</option>
                          {% endfor %}
                        </select>
                      </div>

                      <div>
                        <label> {{ _('Engagement campaign') }}</label>
                        <select name="utm campaign" id="aquisition-utm-campaign">
                          {% for utm_campaign_option in utm_campaign_options %}
                          <option value={{utm_campaign_option}}>{{utm_campaign_option}}</option>
                          {% endfor %}
                        </select>
                      </div>

                      <div>
                        <label> {{ _('Engagement media') }}</label>
                        <select name="utm medium" id="aquisition-utm-medium">
                          {% for utm_campaign_medium in utm_medium_options %}
                          <option value={{utm_campaign_medium}}>{{utm_campaign_medium}}</option>
                          {% endfor %}
                        </select>
                      </div>
                    </div>
                </div>
            </div>
            <div class="card-body-content">
                <div class="card-body-content-loading">
                    <div class="lds-ring"><div></div><div></div><div></div><div></div></div>
                </div>
            <div class="card-body-content-vizualization">
                <div id="aquisition-viz"></div>
            </div>
            <div class="card-body-content-infos">
                <div class="card-body-content-infos-subcard">
                  <span>{{_("Total access to component (engagement)")}}</span>
                  <br>
                  <span id="page-engagement-value"></span>
                </div>
                <div class="card-body-content-infos-subcard">
                  <span>{{_("Participants on the conversation (aquisition)")}}</span>
                  <br>
                <span id="page-aquisition-value"></span>
                </div>
            </div>
            <div class="card-body-error-invalid-dates">
                <span class="helptext">{{ _('end date must be gratter then start date') }}</span>
            </div>
            </div>
        </div>
    </div>
    {% elif ( not data_exists and not mongodb_timeout and not collecting_is_running ) %}
      {% include 'ej_analysis/opinion_component_form.jinja2' %}
    {% endif %}
</div>

{% block javascript %}
<script>

  function showRequirementsToStartCollecting() {
    document.querySelector("#opinion-component-form").style.display = "block";
    document.querySelector("input[name=trigger-collect]").style.display = "none";
  }

async function requestData() {
  var endDate = document.querySelector("#aquisition-date-end").value;
  var startDate = document.querySelector("#aquisition-date-start").value;
  var utmMedium = document.querySelector("#aquisition-utm-medium").value;
  var utmCampaign = document.querySelector("#aquisition-utm-campaign").value;
  var utmSource = document.querySelector("#aquisition-utm-source").value;
  var url =
    "/conversations/{{conversation.id}}/{{conversation.slug}}/analysis/opinion_component?startDate=" +
    startDate +
    "&endDate=" +
    endDate +
    "&utmMedium=" +
    utmMedium +
    "&utmCampaign=" +
    utmCampaign +
    "&utmSource="+
    utmSource;
  var response = await fetch(url);
  var data = await response.json();
  document.querySelector("#page-engagement-value").textContent = data["value"];
  document.querySelector("#page-aquisition-value").textContent = data["children"][0]["value"];
  return data;
}

function setDefaultDateFilter() {
  var localStorageEndDate = localStorage.getItem("aquisitionDateEnd");
  var localStorageStartDate = localStorage.getItem("aquisitionDateStart");

  if(localStorageStartDate && localStorageStartDate) {
      document.querySelector("#aquisition-date-end").value = localStorageEndDate;
      document.querySelector("#aquisition-date-start").value = localStorageStartDate;
      document.querySelector("#aquisition-date-start").max = localStorageEndDate;
    } else {
      var day = new Date(Date.now()).getDate();
      day = day <= 9 ? "0" + day : day;
      var month = new Date(Date.now()).getMonth() + 1;
      month = month <= 9 ? "0" + month : month;
      var year = new Date(Date.now()).getFullYear();
      var formatedEndDate = [year, month, day].join("-");
      document.querySelector("#aquisition-date-end").value = formatedEndDate;

      var day = new Date(Date.now() - 5184000000).getDate();
      day = day <= 9 ? "0" + day : day;
      var month = new Date(Date.now() - 5184000000).getMonth() + 1;
      month = month <= 9 ? "0" + month : month;
      var year = new Date(Date.now() - 5184000000).getFullYear();
      var formatedStartDate = [year, month, day].join("-");

      document.querySelector("#aquisition-date-start").value = formatedStartDate;
      document.querySelector("#aquisition-date-start").max = formatedEndDate;
  }

}

function hideLoading() {
  document.querySelector(".card-body-content-loading").style.display = "none";
  document.querySelector(".card-body-content-infos").style.display = "flex";
  document.querySelector(".card-body-content-vizualization").style.display =
    "flex";
}

function showLoading() {
  document.querySelector(".card-body-content-loading").style.display = "block";
  document.querySelector(".card-body-content-infos").style.display = "none";
  document.querySelector(".card-body-content-vizualization").style.display =
    "none";
}

async function updateVisualization() {
  var endDateInput = document.querySelector("#aquisition-date-end");
  var startDateInput = document.querySelector("#aquisition-date-start");
  localStorage.setItem("aquisitionDateEnd", endDateInput.value);
  localStorage.setItem("aquisitionDateStart", startDateInput.value);
  if(startDateIsBiggerThenEndDate()) {
      showErrors("invalid-dates");
      return;
  }
  hideErrors();
  showLoading();
  var root = d3.hierarchy(await requestData());
  hideLoading();
  d3jsVisualization(root);
}


function showErrors(errorClass) {
  document.querySelector(".card-body-content-infos").style.display = "none";
  document.querySelector(".card-body-content-vizualization").style.display =
    "none";
  document.querySelector(".card-body-content-loading").style.display = "none";
  document.querySelector(".card-body-error-" + errorClass).style.display = "block";
}

function hideErrors() {
  document.querySelector(".card-body-error-invalid-dates").style.display = "none";
}

function startDateIsBiggerThenEndDate() {
  var endDate = new Date(document.querySelector("#aquisition-date-end").value);
  var startDate = new Date(document.querySelector("#aquisition-date-start").value);
  return startDate > endDate;
}

function listenToChanges() {
  var endDateInput = document.querySelector("#aquisition-date-end");
  var startDateInput = document.querySelector("#aquisition-date-start");
  var utmMedium = document.querySelector("#aquisition-utm-medium");
  var utmCampaign = document.querySelector("#aquisition-utm-campaign");
  var utmSource = document.querySelector("#aquisition-utm-source");

  endDateInput.onchange = updateVisualization;
  startDateInput.onchange = updateVisualization;
  utmMedium.onchange = updateVisualization;
  utmCampaign.onchange = updateVisualization;
  utmSource.onchange = updateVisualization;

}

function overwriteCSS() {
 var main = document.querySelector("main");
 main.style.maxWidth = "90%";
 var html = document.querySelector("html");
 html.style.backgroundColor = "#f6f7f9";
}

async function loadAquisitionVizualization() {
  overwriteCSS();
  setDefaultDateFilter();
  listenToChanges();
  var root = d3.hierarchy(await requestData());
  hideLoading();
  d3jsVisualization(root);
}

async function d3jsVisualization(rootNode) {
  var partition = d3.pack();
  partition(rootNode);

  var previusSvg = d3.select("#aquisition-viz");
  previusSvg.select("svg").remove();
  var svg = d3
    .select("#aquisition-viz")
    .append("svg")
    .attr("width", "100%")
    .attr("height", "420")
    .append("g")
    .attr("transform", "translate(130, 200)");

  d3.select("#aquisition-viz svg")
    .selectAll("legend")
    .data(rootNode.descendants())
    .enter()
    .append("circle")
    .attr("cx", (d) => 240)
    .attr("cy", (d) => (d.data.name == "aquisition" ? 48 : 98))
    .attr("r", (d) => 10)
    .attr("fill", function (d) {
      if (d.data.name == "engagement") {
        return "#C4F2F4";
      }
        if (d.data.name == "aquisition") {
        return "#042A46";
      }
    });

  d3.select("#aquisition-viz svg")
    .selectAll("legend")
    .data(rootNode.descendants())
    .enter()
    .append("text")
    .attr("x", (d) => 260)
    .attr("y", (d) => (d.data.name == "aquisition" ? 55 : 105))
    .text((d) => d.data.label)
    .attr("stroke", "black");

  var engagementValue = 0;

  svg
    .selectAll("circle.node")
    .data(rootNode.descendants())
    .enter()
    .append("circle")
    .classed("node", true)
    .attr("cx", (d) => d.x)
    .attr("cy", (d) => d.y)
    .attr("r", function (d) {
      if (d.data.name == "engagement") {
        engagementValue = d.data.value;
        return 121;
      } else {
        return (d.value * 121) / engagementValue;
      }
    })
    .attr("fill", function (d) {
      if (d.data.name == "aquisition") {
        return "#042A46";
      }
      if (d.data.name == "engagement") {
        return "#C4F2F4";
      }
    });
}
window.addEventListener('load', loadAquisitionVizualization);
</script>
{% endblock %}
